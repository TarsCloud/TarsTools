{
  parserClass="com.tencent.jceplugin.parser.JceParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Jce"
  psiImplClassSuffix="Impl"
  psiPackage="com.tencent.jceplugin.psi"
  psiImplPackage="com.tencent.jceplugin.psi.impl"

  elementTypeHolderClass="com.tencent.jceplugin.psi.JceTypes"
  elementTypeClass="com.tencent.jceplugin.psi.JceElementType"
  tokenTypeClass="com.tencent.jceplugin.psi.JceTokenType"

//  identifier      =     [[:alpha:]_][[:alnum:]_]*
//  integer_constant =    (\+|-)?((0[0-7]+)|(0x[[:xdigit:]]+)|([[:digit:]]+))
//  fractional_constant=    (\+|-)?(([[:digit:]]*\.[[:digit:]]+)|([[:digit:]]+\.))
//  exponent_part    =    (e|E)(\+|-)?[[:digit:]]+
//  floating_literal =     (({fractional_constant}{exponent_part}?)|((\+|-)?[[:digit:]]+{exponent_part}))[fF]?

  tokens=[
    LBRACE               =  '{'
    RBRACE               =  '}'
    LBRACK               =  '['
    RBRACK               =  ']'
    LPAREN               =  '('
    RPAREN               =  ')'
    SEMICOLON            =  ';'
    COMMA                =  ','
    ASSIGN               =  '='
//
    VOID                   = 'void'
//    STRUCT                 = 'struct'
//    BOOL                   = 'bool'
//    BYTE                   = 'byte'
//    SHORT                  = 'short'
//    INT                    = 'int'
//    DOUBLE                 = 'double'
//    FLOAT                  = 'float'
//    LONG                   = 'long'
//    STRING                 = 'string'
//    VECTOR                 = 'vector'
//    MAP                    = 'map'
//    KEY                    = 'key'
//    ROUTE_KEY              = 'routekey'
//    MODULE                 = 'module'
//    INTERFACE              = 'interface'
//    OUT                    = 'out'
//    REQUIRE                = 'require'
//    OPTIONAL               = 'optional'
//    FALSE                  = 'false'
//    TRUE                   = 'true'
//    ENUM                   = 'enum'
//    CONST                 =  'const'
//
//    UNSIGNED              =  'unsigned'
//    SCOPE_DELIMITER        = '::'
//    STRING_LITERAL         = '\".*\"'
//    IDENTIFIER             = 'regexp:[[:alpha:]_][[:alnum:]_]*'
//    INTEGER_LITERAL        = 'regexp:(\+|-)?((0[0-7]+)|(0x[[:xdigit:]]+)|([[:digit:]]+))'
//    FLOATING_POINT_LITERAL = 'regexp:(((\+|-)?(([[:digit:]]*\.[[:digit:]]+)|([[:digit:]]+\.))(e|E)(\+|-)?[[:digit:]]+?)|((\+|-)?[[:digit:]]+(e|E)(\+|-)?[[:digit:]]+))[fF]?'
//    NL                   =  'regexp:\R'
//    NLS                  =  'regexp:\R+'
//    WS                   =  'regexp:[ \t\f]'
//    LINE_COMMENT           = 'regexp:// [^\r\n]*'
//    MULTILINE_COMMENT      = 'regexp: \"/\*" ( ([^\"*\"]|[\r\n])* (\"*\"+ [^\"*\"\"/\"] )? )* (\"*\" | \"*\"+\"/\")?'
    SEMICOLON_SYNTHETIC  = '<NL>'
  ]

}

start ::= namespaces
namespaces ::= namespace ';' namespaces
              |namespace
namespace ::= MODULE IDENTIFIER '{' defintions '}'
definitions ::= definition ';' definitions
definition  ::= interface_def
               | struct_def
               | key_def
               | enum_def
               | const_def
enum_def ::= ENUM IDENTIFIER'{' enumerator_list '}'
enumerator_list ::= enumerator ',' enumerator_list
                   | enumerator
enumerator ::= IDENTIFIER
              | IDENTIFIER  '=' const_initializer
key_def ::=  KEY '[' scoped_name ','key_members ']'
key_members ::=  IDENTIFIER
                | key_members ',' IDENTIFIER
interface_def ::= INTERFACE IDENTIFIER '{' interface_exports '}'
interface_exports ::=  interface_export ';' interface_exports
                      | interface_export
interface_export ::= type IDENTIFIER '(' parameters ')'
parameters ::= parameter ',' parameters
              | parameter
parameter ::=  // empty
             | type_id
             | OUT type_id
             | ROUTE_KEY type_id
struct_def ::= STRUCT IDENTIFIER '{' struct_exports '}'
struct_exports ::= data_member ';' struct_exports
                  | data_member
data_member ::=  INTEGER_LITERAL REQUIRE type_id
                | INTEGER_LITERAL REQUIRE type_id '=' const_initializer
                | INTEGER_LITERAL OPTIONAL type_id '=' const_initializer
                | INTEGER_LITERAL OPTIONAL type_id
const_initializer ::= INTEGER_LITERAL
                    | FLOATING_POINT_LITERAL
                    | STRING_LITERAL
                    | FALSE
                    | TRUE
                    | IDENTIFIER
                    | scoped_name SCOPE_DELIMITER IDENTIFIER
const_def ::= CONST type_id '=' const_initializer
type_id ::= type IDENTIFIER
type ::= BOOL
        | BYTE
        | UNSIGNED BYTE
        | SHORT
        | UNSIGNED SHORT
        | INT
        | UNSIGNED INT
        | LONG
        | FLOAT
        | DOUBLE
        | STRING
        | vector_t
        | map_t
        | scoped_name
vector_t ::= VECTOR '<' type '>'
map_t ::= MAP '<' type ',' type '>'
scoped_name ::= IDENTIFIER
                | scoped_name SCOPE_DELIMITER IDENTIFIER